<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:security="http://www.springframework.org/schema/security"
    xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd">

    <security:http pattern="/oauth/token" create-session="stateless" disable-url-rewriting="true"
        authentication-manager-ref="clientAuthenticationManager">
        <security:intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
        <security:anonymous enabled="false" />
        <security:http-basic entry-point-ref="clientAuthenticationEntryPoint" />
        <security:custom-filter ref="clientCredentialsTokenEndpointFilter" after="BASIC_AUTH_FILTER" />
        <security:access-denied-handler ref="oauthAccessDeniedHandler" />
    </security:http>

    <security:http pattern="/service/**" create-session="never" disable-url-rewriting="true"
        entry-point-ref="oauthAuthenticationEntryPoint" access-decision-manager-ref="oauthAccessDecisionManager">
        <security:intercept-url pattern="/service/**" access="IS_AUTHENTICATED_FULLY" />
        <security:anonymous enabled="false" />
        <security:custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
        <security:access-denied-handler ref="oauthAccessDeniedHandler" />
    </security:http>

    <security:http auto-config="true" disable-url-rewriting="true"
        authentication-manager-ref="userAuthenticationManagerProxy">
        <security:intercept-url pattern="/www/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <security:intercept-url pattern="/auth/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <security:intercept-url pattern="/captcha.jpg" access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <security:intercept-url pattern="/admin/**" access="ROLE_ADMIN" />
        <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
        <security:form-login login-page="/auth/AA01S010Action.action"
            username-parameter="userId" password-parameter="password"
            authentication-failure-handler-ref="loginFailureHandler" />
        <security:logout success-handler-ref="logoutSuccessHandler" delete-cookies="JSESSIONID" />
        <security:session-management invalid-session-url="/auth/invalid-session.action" />
        <security:custom-filter after="EXCEPTION_TRANSLATION_FILTER" ref="saveExceptionFilter" />
        <security:custom-filter after="LAST" ref="dualLoginCheckFilter" />
    </security:http>

    <bean id="oauthAccessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
        <constructor-arg>
            <list>
                <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
                <bean class="org.springframework.security.access.vote.RoleVoter" />
                <bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
            </list>
        </constructor-arg>
    </bean>

    <bean id="clientAuthenticationEntryPoint"
        class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="typeName" value="Basic" />
    </bean>

    <bean id="oauthAuthenticationEntryPoint"
        class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint" />

    <bean id="clientCredentialsTokenEndpointFilter"
        class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <property name="authenticationManager" ref="clientAuthenticationManager" />
    </bean>

    <bean id="oauthAccessDeniedHandler"
        class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

    <security:authentication-manager id="clientAuthenticationManager">
        <security:authentication-provider user-service-ref="clientDetailsUserService">
            <security:password-encoder ref="passwordEncoder" />
        </security:authentication-provider>
    </security:authentication-manager>

    <oauth2:resource-server id="resourceServerFilter" token-services-ref="tokenServices" />

    <oauth2:authorization-server client-details-service-ref="clientDetails"
        token-services-ref="tokenServices" user-approval-handler-ref="userApprovalHandler">
        <oauth2:authorization-code />
        <oauth2:implicit />
        <oauth2:refresh-token />
        <oauth2:client-credentials />
        <oauth2:password />
    </oauth2:authorization-server>

    <bean id="clientDetails" class="org.springframework.security.oauth2.provider.JdbcClientDetailsService">
        <constructor-arg ref="managementDataSource" />
        <property name="passwordEncoder" ref="passwordEncoder" />
    </bean>

    <bean id="clientDetailsUserService"
        class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <constructor-arg ref="clientDetails" />
        <property name="passwordEncoder" ref="passwordEncoder" />
    </bean>

    <bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.JdbcTokenStore">
        <constructor-arg ref="managementDataSource" />
    </bean>

    <bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <property name="clientDetailsService" ref="clientDetails" />
        <property name="supportRefreshToken" value="true" />
        <property name="tokenStore" ref="tokenStore" />
    </bean>

    <bean id="userApprovalHandler"
        class="org.springframework.security.oauth2.provider.approval.TokenServicesUserApprovalHandler">
        <property name="tokenServices" ref="tokenServices" />
    </bean>

    <bean id="loginFailureHandler" class="jp.myapp.web.controller.auth.handler.LoginFailureHandler">
        <property name="defaultFailureUrl" value="/auth/AA01S010Action.action" />
    </bean>

    <bean id="logoutSuccessHandler" class="jp.myapp.web.controller.auth.handler.LogoutSuccessHandler" />

    <bean id="saveExceptionFilter" class="jp.myapp.web.controller.auth.web.SaveExceptionFilter" />

    <bean id="dualLoginCheckFilter" class="jp.myapp.web.controller.auth.web.DualLoginCheckFilter" />

    <security:authentication-manager alias="userAuthenticationManager">
        <security:authentication-provider ref="userAuthenticationProvider" />
    </security:authentication-manager>

    <bean id="userAuthenticationManagerProxy" class="jp.myapp.web.controller.auth.support.UserAuthenticationManagerProxy">
        <constructor-arg ref="userAuthenticationManager" />
    </bean>

    <bean id="userAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
        <property name="userDetailsService">
            <bean class="jp.myapp.service.logic.auth.LoginUserDetailsManager">
                <property name="dataSource" ref="managementDataSource" />
                <property name="usersByUsernameQuery"
                    value="select user_id, username, password, password_updated_timestamp, enabled, interim_register, login_error_count, lockout_timestamp, last_login_timestamp, logout_timestamp, register_timestamp, register_user_id, updated_timestamp, updated_user_id, version from users where user_id = ?" />
                <property name="authoritiesByUsernameQuery"
                    value="select user_id as username, authority, register_timestamp, register_user_id, updated_timestamp, updated_user_id, version from authorities where user_id = ?" />
            </bean>
        </property>
        <property name="passwordEncoder" ref="passwordEncoder" />
        <property name="hideUserNotFoundExceptions" value="false" />
        <property name="preAuthenticationChecks">
            <bean class="jp.myapp.web.controller.auth.checker.BeforeLoginUserChecker" />
        </property>
    </bean>

    <bean id="passwordEncoder" class="org.springframework.security.crypto.password.StandardPasswordEncoder" />

</beans>
